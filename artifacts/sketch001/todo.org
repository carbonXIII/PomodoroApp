#+TITLE: WIP things for user story 1

* Diagrams
** System Context [2021-02-12 Fri] 
#+begin_src plantuml :file ../images/001-system-context-diagram.png :exports results
title Overall System Context Diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "Anon User")
Container(primary, "Pomodoro Application", "Java,Android", "Allow users to time the steps of the Pomodoro process while executing a task.")

Rel(user, primary, "Uses")
#+end_src

#+RESULTS:
[[file:../images/001-system-context-diagram.png]]

For this user story, there are no notications, only a single task is stored at
any given time, and there is no third-party integration.

** Container [2021-02-12 Fri]
#+begin_src plantuml :file ../images/001-container-diagram.png :exports results
  title Overall Container Diagram
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

  Person(user, "Anon User")
  System_Boundary(c1, "Pomodoro Application") {
          Container(view, "UI", "Java, XML, Android SDK", "Handles UI")
          Container(api, "API", "Java", "The interface between our UI elements and the model. Handles validation and retrieval of model data for display.")
  }

  Rel(user, view, "Interacts With")
  Rel(view, api, "Sends Client Events")
  Rel(api, view, "Returns UI Data")
#+end_src

#+RESULTS:
[[file:../images/001-container-diagram.png]]

** Component [2021-02-12 Fri]
#+begin_src plantuml :file ../images/001-component-diagram.png :exports results
  title Application Component Diagram (UI and API)
  !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

  Container(main, "Main Activity", "AppCompatActivity", "Handles switching between views/fragments as well as model and presenter lifetime.")
  Container(view, "Active Fragment", "View", "The currently loaded Fragment, manages UI elements and UI events (timers, buttons).")

  System_Boundary(c2, "API") {
          Container(presenter, "Presenter", "Java", "Handles validation of UI events and model interaction.")
          Container(model, "Model", "In memory, saved to bundle on destroy", "")
  }

  Rel_R(main, view, "Add Fragment to FragmentView")
  Rel(view, main, "Replace view")

  Rel_D(view, presenter, "UI events")
  Rel_U(presenter, view, "Model events")
  Rel(main, presenter, "Load on create")

  Rel_D(presenter, model, "Update task information")
  Rel_U(model, presenter, "Load task info")
  Rel_L(main, model, "Load on create")

#+end_src

#+RESULTS:
[[file:../images/001-component-diagram.png]]

** Sequence [2021-02-11 Thu]
 #+begin_src plantuml :file ../images/001-sequence-diagram.png :exports results
title User Story 1 Sequence

actor User
participant View
participant Presenter
participant Model

User->View: starts app (launch main screen/activity)
loop
        loop task form loop
                Presenter->View: switch to new task screen
        == New Task Screen ==
                User->View: complete task form
                User->View: press ok button
                View->Presenter: new task form info
                Presenter->Presenter: validate task details
                alt task form valid
                        break exit task form loop
                                Presenter->Model: create new task object
                        end
                else form invalid
                        Presenter->View: show form validation error
                end
        end
        
        loop while task is not done
                Presenter->View: switch to timer screen
                == Work Timer Screen ==
                Presenter->Model: get task info
                Model->Presenter:
                Presenter->View: set timer title and subtitle
                loop while timer is not done
                        Presenter->View: update timer
                        opt
                                User-->View: optional break early
                                break exit timer loop
                                        View->Presenter: cancel timer
                                end
                        end
                end
                
                Presenter->View: switch to continue screen
                == Continue Screen ==
                Presenter->Model: get task info
                Model->Presenter:
                Presenter->View: set task name
                opt Task complete
                        User->View: selects done
                        break exit task loop
                                View->Presenter: done
                                Presenter->Model:  mark task as done
                        end
                end
                
                User->View: user selects continue
                View->Presenter: continue
                
                Presenter->View: switch to break timer screen
                == Break Timer Screen ==
                Presenter->Model: get task info
                Model->Presenter:
                Presenter->View: set timer title and subtitle

                loop while timer is not done
                        Presenter->View: update timer
                        opt
                                User-->View: optional break early
                                break exit timer loop
                                        View->Presenter: cancel timer
                                end
                        end
                end
        end
end
 #+end_src

   #+RESULTS:
   [[file:../images/001-sequence-diagram.png]]

* UI Sketch [2021-02-10 Wed]
** task setup screen
   [[../images/task_setup.png]]
** timer screens
*** working
    [[../images/timer_work.png]]
*** break
    [[../images/timer_break.png]]
** continue screen
   [[../images/continue.png]]
* Implement
** Layouts [2021-02-10 Wed]
*** headings
*** buttons
*** text input
*** timer
** Integration
*** fragment <-> layout mapping [2021-02-10 Wed] 
    Fairly straightforward:
#+BEGIN_SRC java
// Repace layout name with name of corresponding layout

import static org.team.app.R.layout.layout_name;

// ...

/* ... */ void onCreate( /* ... */  ) {
    super.onCreate(savedInstanceState);
    setContentView(layout_name);
}
#+END_SRC
*** presenter and (basic=no db) model
**** presenter
***** form validation
      will at least attempt TDD here
**** activity-presenter interaction
***** UI management interface
      - need to be able to update form data, but most of the UI code should
        still live in the activity not the presenter
      - one main activity that will serve as a Fragment Manager
#+begin_src java
        if(savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                .setReorderingAllowed(true)
                .add(R.id.fragmentContainerView, ExampleFragment.class, null)
                .commit();
        }
#+end_src
      - each screen will have it's UI code stored in a fragment
      - triggering screen transitions will be a function of the main activity
      - persistent info across quits needs to be stored in a bundle and saved to the back stack (?)
***** timers/events
      - need to be able to register presenters to handle events
      - need an enum of event types (or an event interface of some kind)
    
